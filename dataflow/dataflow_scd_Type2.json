{
	"name": "dataflow_scd_Type2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_4_scd_dataflow",
						"type": "DatasetReference"
					},
					"name": "blobcsv"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlSCD",
						"type": "DatasetReference"
					},
					"name": "Azuresqlsource",
					"description": "To view data in the existing Target table prior to the New Target table (Look Up Value)"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_4_scd_sqldb_sink",
						"type": "DatasetReference"
					},
					"name": "Azuresqlsink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlSCD",
						"type": "DatasetReference"
					},
					"name": "Updatesink"
				}
			],
			"transformations": [
				{
					"name": "derivedIsCurrentColumn"
				},
				{
					"name": "selectforcomparing"
				},
				{
					"name": "lookuptocompareexistingdata"
				},
				{
					"name": "RetainMatchingValues"
				},
				{
					"name": "DataWeNeed"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow"
				}
			],
			"scriptLines": [
				"source(output(",
				"          stdid as integer,",
				"          stdname as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> blobcsv",
				"source(output(",
				"          std_key as integer,",
				"          std__id as integer,",
				"          std_name as string,",
				"          Location as string,",
				"          isCurrent as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Azuresqlsource",
				"blobcsv derive(isCurrent = 1) ~> derivedIsCurrentColumn",
				"Azuresqlsource select(mapColumn(",
				"          DB_Sur_key = std_key,",
				"          DB_Std__id = std__id,",
				"          DB_Std_name = std_name,",
				"          DB_Location = Location,",
				"          DB_IsCurrent = isCurrent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectforcomparing",
				"blobcsv, selectforcomparing lookup(stdid == DB_Std__id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookuptocompareexistingdata",
				"lookuptocompareexistingdata filter(!isNull(DB_Std__id)) ~> RetainMatchingValues",
				"RetainMatchingValues select(mapColumn(",
				"          DB_Sur_key,",
				"          DB_Std__id,",
				"          DB_Std_name,",
				"          DB_Location,",
				"          DB_IsCurrent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DataWeNeed",
				"DataWeNeed derive(DB_IsCurrent = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(DB_IsCurrent==0)) ~> alterRow",
				"derivedIsCurrentColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          stdid as integer,",
				"          stdname as string,",
				"          location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Azuresqlsink1",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          std_key as integer,",
				"          std__id as integer,",
				"          std_name as string,",
				"          Location as string,",
				"          isCurrent as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['std_key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          std_key = DB_Sur_key,",
				"          std__id = DB_Std__id,",
				"          std_name = DB_Std_name,",
				"          Location = DB_Location,",
				"          isCurrent = DB_IsCurrent",
				"     )) ~> Updatesink"
			]
		}
	}
}